1) Give an example where call apply bind is. required?
Ans.  call():-
            var obj = { num: 2 };

                function add(a, b){
                   return this.num + a + b;
                }
            console.log(add.call(obj, 3, 5));
    
      example- apply():-
            var obj = { num: 2 };

                function add(a, b){
                   return this.num + a + b;
                }
            console.log(add.apply(obj, [3, 5]));
        
      exmaple- bind():-
            var obj = { num: 2 };

            function add(a, b){
               return this.num + a + b;
            }

            const func = add.bind(obj, 3, 5);
            func(); // Returns 10;

2) What is the difference between readFile and readFileSync?
Ans. readFileSync() is synchronous and blocks execution until finished. These return their results as return values.
     readFile() are asynchronous and return immediately while they function in the background.

3) What does process in node.js mean?
Ans.- Node. js provides the facility to get process information such as process id, architecture, platform, version, release, uptime, upu usage etc. It can also be used to kill process, set uid, set groups, unmask etc
    - The process object in Node. js is a global object that can be accessed inside any module without requiring it. 
    - There are very few global objects or properties provided in Node. js and process is one of them. It is an essential component in the Node.

4) Explain what node.js is?
Ans. Node. js (Node) is an open source development platform for executing JavaScript code server-side. Node is useful for developing applications that require a persistent connection from the browser to the server and is often used for real-time applications such as chat, news feeds and web push notifications.

5) What is the difference of JS from browser to JS on node.js
Ans. JAVASCRIPT:
    - Javascript is a programming language that is used for writing scripts on the website. 
    - Javascript can only be run in the browsers.
    - It is basically used on the client-side.
    - Javascript is capable enough to add HTML and play with the DOM. 

    NODE:   
    - NodeJS is a Javascript runtime environment.
    - We can run Javascript outside the browser with the help of NodeJS.
    - It is mostly used on the server-side.
    - Nodejs does not have capability to add HTML tags

6) Write three different ways to reverse a string in Javascript? a. using inbuilt method, b. iteratively, c. recursively
Ans. 1-Inbuilt-Method :-

     var str = "abcdefg"
     str = str.split("");
     str.reverse();
     console.log(str);

    2- iteratively:-

     var str = "abcdefg";
     str = str.split("");
     let L = 0;
     let R = str.length-1;
     while(L < R){
         [str[L], str[R]] = [str[R], str[L]];
         L++;
         R--;
     }
     console.log(str);


    3- RECURSIVELY:-

    var str = "abcde"
    function reverse(str, len) {
            if (len === str.length) {
                return;
            }
            reverse(str, len + 1);
    }


7) Write a program to check two objects are equal (deep equal);
Ans. 
    const equals = (a, b) => {
        if (a === b) return true;
        if (a instanceof Date && b instanceof Date) return a.getTime() === b.getTime();
        if (!a || !b || (typeof a !== 'object' && typeof b !== 'object')) return a === b;
        if (a === null || a === undefined || b === null || b === undefined) return false;
        if (a.prototype !== b.prototype) return false;
        let keys = Object.keys(a);
        if (keys.length !== Object.keys(b).length) return false;
        return keys.every(k => equals(a[k], b[k]));
    };

console.log(equals({ a: [2, { e: 3 }], b: [4], c: 'foo' }, { a: [2, { e: 3 }], b: [4], c: 'foo' })); // true
                                    (or)
objects were stringified() at first and then compared with each other.

Example:-

<html>
<body>
   <script>
      const obj1 = {Name: "Rahim", City: 'Hyderabad',Country: "India" };
      const obj2 = {Name: "Rahim", City: 'Hyderabad',Country: "India" };
      document.write(JSON.stringify(obj1) === JSON.stringify(obj2));
   </script>
</body>
</html>

//true
note:- you can also check equality by "_isEqual()", It checks whether the key/value pairs are equal or not but not their order. 

8) What is shallow equal?
Ans. A function for performing a shallow comparison between two objects or arrays. Two values have shallow equality when all of their members are strictly equal to the corresponding member of the other.




     



